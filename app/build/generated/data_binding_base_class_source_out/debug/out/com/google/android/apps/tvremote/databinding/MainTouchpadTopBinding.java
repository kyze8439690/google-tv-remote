// Generated by view binder compiler. Do not edit!
package com.google.android.apps.tvremote.databinding;

import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.viewbinding.ViewBinding;
import android.viewbinding.ViewBindings;
import android.widget.RelativeLayout;
import com.google.android.apps.tvremote.R;
import com.google.android.apps.tvremote.layout.FixedLayout;
import com.google.android.apps.tvremote.layout.SlidingLayout;
import com.google.android.apps.tvremote.widget.HighlightView;
import com.google.android.apps.tvremote.widget.KeyCodeButton;
import com.google.android.apps.tvremote.widget.SoftDpad;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class MainTouchpadTopBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final HighlightView HighlightView;

  @NonNull
  public final RelativeLayout MainScreen;

  @NonNull
  public final FixedLayout ReversedLayout;

  @NonNull
  public final SoftDpad SoftDpad;

  @NonNull
  public final KeyCodeButton buttonNextPage;

  @NonNull
  public final SlidingLayout slider;

  @NonNull
  public final FixedLayout verticalLayout;

  private MainTouchpadTopBinding(@NonNull RelativeLayout rootView,
      @NonNull HighlightView HighlightView, @NonNull RelativeLayout MainScreen,
      @NonNull FixedLayout ReversedLayout, @NonNull SoftDpad SoftDpad,
      @NonNull KeyCodeButton buttonNextPage, @NonNull SlidingLayout slider,
      @NonNull FixedLayout verticalLayout) {
    this.rootView = rootView;
    this.HighlightView = HighlightView;
    this.MainScreen = MainScreen;
    this.ReversedLayout = ReversedLayout;
    this.SoftDpad = SoftDpad;
    this.buttonNextPage = buttonNextPage;
    this.slider = slider;
    this.verticalLayout = verticalLayout;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static MainTouchpadTopBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static MainTouchpadTopBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.main_touchpad_top, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static MainTouchpadTopBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.HighlightView;
      HighlightView HighlightView = ViewBindings.findChildViewById(rootView, id);
      if (HighlightView == null) {
        break missingId;
      }

      RelativeLayout MainScreen = (RelativeLayout) rootView;

      id = R.id.ReversedLayout;
      FixedLayout ReversedLayout = ViewBindings.findChildViewById(rootView, id);
      if (ReversedLayout == null) {
        break missingId;
      }

      id = R.id.SoftDpad;
      SoftDpad SoftDpad = ViewBindings.findChildViewById(rootView, id);
      if (SoftDpad == null) {
        break missingId;
      }

      id = R.id.button_next_page;
      KeyCodeButton buttonNextPage = ViewBindings.findChildViewById(rootView, id);
      if (buttonNextPage == null) {
        break missingId;
      }

      id = R.id.slider;
      SlidingLayout slider = ViewBindings.findChildViewById(rootView, id);
      if (slider == null) {
        break missingId;
      }

      id = R.id.vertical_layout;
      FixedLayout verticalLayout = ViewBindings.findChildViewById(rootView, id);
      if (verticalLayout == null) {
        break missingId;
      }

      return new MainTouchpadTopBinding((RelativeLayout) rootView, HighlightView, MainScreen,
          ReversedLayout, SoftDpad, buttonNextPage, slider, verticalLayout);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
